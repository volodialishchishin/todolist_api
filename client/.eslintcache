[{"/Users/volodialishchyshyn/Desktop/Project/client/src/index.tsx":"1","/Users/volodialishchyshyn/Desktop/Project/client/src/reportWebVitals.ts":"2","/Users/volodialishchyshyn/Desktop/Project/client/src/app/store.ts":"3","/Users/volodialishchyshyn/Desktop/Project/client/src/app/App.tsx":"4","/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/todolists-reducer.ts":"5","/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/tasks-reducer.ts":"6","/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/TodolistsList.tsx":"7","/Users/volodialishchyshyn/Desktop/Project/client/src/api/todolists-api.ts":"8","/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/Todolist/Todolist.tsx":"9","/Users/volodialishchyshyn/Desktop/Project/client/src/components/AddItemForm/AddItemForm.tsx":"10","/Users/volodialishchyshyn/Desktop/Project/client/src/components/EditableSpan/EditableSpan.tsx":"11","/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/Todolist/Task/Task.tsx":"12"},{"size":643,"mtime":1611305034000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1607872988000,"results":"15","hashOfConfig":"14"},{"size":1033,"mtime":1596295538000,"results":"16","hashOfConfig":"14"},{"size":898,"mtime":1596295712000,"results":"17","hashOfConfig":"14"},{"size":3304,"mtime":1651090908426,"results":"18","hashOfConfig":"14"},{"size":4574,"mtime":1651097084952,"results":"19","hashOfConfig":"14"},{"size":3771,"mtime":1650837728470,"results":"20","hashOfConfig":"14"},{"size":2140,"mtime":1651109176852,"results":"21","hashOfConfig":"14"},{"size":3802,"mtime":1650835498279,"results":"22","hashOfConfig":"14"},{"size":1474,"mtime":1594727720000,"results":"23","hashOfConfig":"14"},{"size":952,"mtime":1594154724000,"results":"24","hashOfConfig":"14"},{"size":1773,"mtime":1596295538000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"p8r96e",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"/Users/volodialishchyshyn/Desktop/Project/client/src/index.tsx",[],["55","56"],"/Users/volodialishchyshyn/Desktop/Project/client/src/reportWebVitals.ts",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/app/store.ts",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/app/App.tsx",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/todolists-reducer.ts",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/tasks-reducer.ts",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/TodolistsList.tsx",["57","58","59","60","61","62","63","64","65","66"],"import React, {useCallback, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport axios from \"axios\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","/Users/volodialishchyshyn/Desktop/Project/client/src/api/todolists-api.ts",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/Todolist/Todolist.tsx",["67","68","69","70","71","72"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","/Users/volodialishchyshyn/Desktop/Project/client/src/components/AddItemForm/AddItemForm.tsx",["73","74","75"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/Users/volodialishchyshyn/Desktop/Project/client/src/components/EditableSpan/EditableSpan.tsx",[],"/Users/volodialishchyshyn/Desktop/Project/client/src/features/TodolistsList/Todolist/Task/Task.tsx",["76","77","78"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":40,"nodeType":"85","messageId":"86","endLine":1,"endColumn":48},{"ruleId":"83","severity":1,"message":"87","line":18,"column":8,"nodeType":"85","messageId":"86","endLine":18,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":28,"column":8,"nodeType":"90","endLine":28,"endColumn":10,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":33,"column":8,"nodeType":"90","endLine":33,"endColumn":10,"suggestions":"93"},{"ruleId":"88","severity":1,"message":"92","line":38,"column":8,"nodeType":"90","endLine":38,"endColumn":10,"suggestions":"94"},{"ruleId":"88","severity":1,"message":"92","line":43,"column":8,"nodeType":"90","endLine":43,"endColumn":10,"suggestions":"95"},{"ruleId":"88","severity":1,"message":"92","line":48,"column":8,"nodeType":"90","endLine":48,"endColumn":10,"suggestions":"96"},{"ruleId":"88","severity":1,"message":"92","line":53,"column":8,"nodeType":"90","endLine":53,"endColumn":10,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"92","line":58,"column":8,"nodeType":"90","endLine":58,"endColumn":10,"suggestions":"98"},{"ruleId":"88","severity":1,"message":"92","line":63,"column":8,"nodeType":"90","endLine":63,"endColumn":10,"suggestions":"99"},{"ruleId":"88","severity":1,"message":"100","line":33,"column":8,"nodeType":"90","endLine":33,"endColumn":10,"suggestions":"101"},{"ruleId":"88","severity":1,"message":"102","line":37,"column":8,"nodeType":"90","endLine":37,"endColumn":33,"suggestions":"103"},{"ruleId":"88","severity":1,"message":"102","line":44,"column":8,"nodeType":"90","endLine":44,"endColumn":45,"suggestions":"104"},{"ruleId":"88","severity":1,"message":"102","line":46,"column":86,"nodeType":"90","endLine":46,"endColumn":116,"suggestions":"105"},{"ruleId":"88","severity":1,"message":"102","line":47,"column":92,"nodeType":"90","endLine":47,"endColumn":122,"suggestions":"106"},{"ruleId":"88","severity":1,"message":"102","line":48,"column":98,"nodeType":"90","endLine":48,"endColumn":128,"suggestions":"107"},{"ruleId":"83","severity":1,"message":"108","line":2,"column":9,"nodeType":"85","messageId":"86","endLine":2,"endColumn":12},{"ruleId":"83","severity":1,"message":"109","line":2,"column":14,"nodeType":"85","messageId":"86","endLine":2,"endColumn":20},{"ruleId":"83","severity":1,"message":"110","line":2,"column":22,"nodeType":"85","messageId":"86","endLine":2,"endColumn":33},{"ruleId":"88","severity":1,"message":"102","line":15,"column":97,"nodeType":"90","endLine":15,"endColumn":130,"suggestions":"111"},{"ruleId":"88","severity":1,"message":"102","line":20,"column":8,"nodeType":"90","endLine":20,"endColumn":41,"suggestions":"112"},{"ruleId":"88","severity":1,"message":"102","line":24,"column":8,"nodeType":"90","endLine":24,"endColumn":41,"suggestions":"113"},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["116"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["117"],["118"],["119"],["120"],["121"],["122"],["123"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["124"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["125"],["126"],["127"],["128"],["129"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["130"],["131"],["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"133","fix":"135"},{"desc":"133","fix":"136"},{"desc":"133","fix":"137"},{"desc":"133","fix":"138"},{"desc":"133","fix":"139"},{"desc":"133","fix":"140"},{"desc":"133","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"144","fix":"146"},{"desc":"144","fix":"147"},{"desc":"144","fix":"148"},{"desc":"144","fix":"149"},{"desc":"144","fix":"150"},{"desc":"144","fix":"151"},{"desc":"144","fix":"152"},"Update the dependencies array to be: [dispatch]",{"range":"153","text":"154"},{"range":"155","text":"154"},{"range":"156","text":"154"},{"range":"157","text":"154"},{"range":"158","text":"154"},{"range":"159","text":"154"},{"range":"160","text":"154"},{"range":"161","text":"154"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"162","text":"163"},"Update the dependencies array to be: [props]",{"range":"164","text":"165"},{"range":"166","text":"165"},{"range":"167","text":"165"},{"range":"168","text":"165"},{"range":"169","text":"165"},{"range":"170","text":"165"},{"range":"171","text":"165"},{"range":"172","text":"165"},[1087,1089],"[dispatch]",[1258,1260],[1429,1431],[1634,1636],[1847,1849],[2048,2050],[2195,2197],[2374,2376],[1341,1343],"[dispatch, props.id]",[1449,1474],"[props]",[1687,1724],[1814,1844],[1938,1968],[2068,2098],[765,798],[1071,1104],[1261,1294]]